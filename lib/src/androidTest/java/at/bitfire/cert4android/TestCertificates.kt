package at.bitfire.cert4android

import android.net.SSLCertificateSocketFactory
import org.apache.http.conn.ssl.AllowAllHostnameVerifier
import java.net.URL
import java.security.cert.CertificateFactory
import java.security.cert.X509Certificate
import javax.net.ssl.HttpsURLConnection
import javax.net.ssl.X509TrustManager

/**
 * Provides certificates for testing.
 */
object TestCertificates {

    val certFactory = CertificateFactory.getInstance("X.509")

    /* generated for testing */
    const val RANDOM_UNSIGNED_CERT = "-----BEGIN CERTIFICATE-----\n" +
            "MIIDiTCCAnGgAwIBAgIUSGSlBGowPbzWvRWkulK56y/8di8wDQYJKoZIhvcNAQEL\n" +
            "BQAwbTELMAkGA1UEBhMCWFgxDTALBgNVBAgMBFRFU1QxDTALBgNVBAcMBFRFU1Qx\n" +
            "DTALBgNVBAoMBFRFU1QxDTALBgNVBAsMBFRFU1QxDTALBgNVBAMMBFRFU1QxEzAR\n" +
            "BgkqhkiG9w0BCQEWBFRFU1QwHhcNMjUxMDMxMTUzMTMzWhcNMjYxMDMxMTUzMTMz\n" +
            "WjBtMQswCQYDVQQGEwJYWDENMAsGA1UECAwEVEVTVDENMAsGA1UEBwwEVEVTVDEN\n" +
            "MAsGA1UECgwEVEVTVDENMAsGA1UECwwEVEVTVDENMAsGA1UEAwwEVEVTVDETMBEG\n" +
            "CSqGSIb3DQEJARYEVEVTVDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEB\n" +
            "AJ3MQAseGNujzTmItMHiOoQaC2+ss4KG2eAIF4ZVMSsvWVhIRZRPlabpX2FKhTRf\n" +
            "XfmbXI0ISYiq81oo8Nv+AETWwFWPPmPxrJDKrXNQKMN33Anm2bCHTsl6K3eBiMZt\n" +
            "gnSfW4B80r8jvsj4HNoXfR8/RyEG5mTqE35djL3Z8gDH5wHnaoxRqVRtkzFfj9M7\n" +
            "VJf7Ifbun5rjBx8XkrC6R02vw465K/UNQ7dyBWA68OI7luL8Kg3lqioovHqJv9I0\n" +
            "iD0sb8P82kJuwFzWVRv/hgBTcdX8xC8J6j6pGwJ/nw/tBHTEHGSOhzeqxjQ5Xicr\n" +
            "Z13C8zjmYywm1A4Xw+MY/mECAwEAAaMhMB8wHQYDVR0OBBYEFFtIe8VoYQlz/LJ8\n" +
            "DrU+eDOQlBmRMA0GCSqGSIb3DQEBCwUAA4IBAQB2UDqHpvhnenTA6zykz4ThQ40y\n" +
            "6+V4Koa8bdCdAtRZEgz1ZsOntaQ/PBFegd2ksp2QpF0T868ON6/toYy9PTdQ0wd9\n" +
            "X9p3Co+9iV5/RHGlt8YOQyljto8fJ+V4kGv4VrEecYS/+/nQtqR3IKO2gaPol0w8\n" +
            "SxmO346ku+O5ifupJrj5Wy8CYe9OJSKdYOd/Qpgbh9ecwmL1Lq8KRJqB2gzocCxg\n" +
            "32PUB1ZgVmOQfKW14qb0dZhh0sJwGg2W7EFXPsfN+EFWEJqOkD0Rg3k1K8k5ZnX0\n" +
            "nbs2Hqf96XLIZxFOcJWxaIaDhexvRdJSJiCnWQL2kHH032aN+dQeSkLtQO9c\n" +
            "-----END CERTIFICATE-----\n\n"

    fun crashCert() = certFactory.generateCertificate(RANDOM_UNSIGNED_CERT.byteInputStream()) as X509Certificate

    /** some test certificate (untrusted Snakeoil certificate generated by Debian) */
    const val RAW_TEST_CERT = "-----BEGIN CERTIFICATE-----\n" +
            "MIICxzCCAa+gAwIBAgIUe7x8TfMqQlJ+qTF/L+n6NqRqKAwwDQYJKoZIhvcNAQEL\n" +
            "BQAwDjEMMAoGA1UEAwwDdG50MB4XDTIwMDIxODE5NTYyMFoXDTMwMDIxNTE5NTYy\n" +
            "MFowDjEMMAoGA1UEAwwDdG50MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKC\n" +
            "AQEAzqBnVAWwIp8oOrcEJzplOLzd8ZKscmrJ0oxMf7oiYUE5+D3I1IjsCIeUdwfH\n" +
            "9zDKmNo3lwyFUTjw2WotssawmEH0LGfabi6h/1bbFG4QOQC7KYMtD8tqzR6F0WVe\n" +
            "oZ5uM5VvQB+dRvlq2CdWb8NcBkyd2pQ8RvJsft3fWY5ix3CL+OZ8lXOGqkxN780m\n" +
            "RkrxdYog3fvWC1CMSix8Y28q4JwRRAMP0JhBGIdFpnEPLowh6HhhPRiwAn+ksSey\n" +
            "Rz39AsUErUUCD7soCsDSzu80uieF9enEVweqnn/ayPhJlX0Drw7UwrC88UqdLqRD\n" +
            "Da/ucJYzKkMgHZJ7EXNh2WZpbwIDAQABox0wGzAJBgNVHRMEAjAAMA4GA1UdEQQH\n" +
            "MAWCA3RudDANBgkqhkiG9w0BAQsFAAOCAQEARpS40Z7hsIeiGqI4Pd33vIK69PwZ\n" +
            "yhfGwGT61Fo3CFyEBAc8y+93NkI3l6bd/En8UAkG87nE6qsBxc9LedFhabdcgsgf\n" +
            "rEN8vqNhhucuLyHPPzCi+C2sAJHgAGoKEgrfrmvdjCYUa1TJng59n5W5q8SmmYf/\n" +
            "AEokes8tF8DuZ3TOTXt2MwPFIbaZiDyn6J1+PYmEPMxoqbG5TDYkox4U4+zODDt0\n" +
            "0GFBlln9186eAbdKPSIkS8slAlB5ylBg/TlG/LmzQ/5ESqITyXSTJo5RSLCQ32iG\n" +
            "46rF2aPRcVr71DWqbV+YdwkI3N7EwZOIIEl6a9srF+q01LrIukWkScuU9Q==\n" +
            "-----END CERTIFICATE-----\n"

    fun testCert() = certFactory.generateCertificate(RAW_TEST_CERT.byteInputStream()) as X509Certificate


    /**
     * Get the certificates of a site (bypassing all trusted checks).
     *
     * @param url the URL to get the certificates from
     * @return the certificates of the site
     */
    fun getSiteCertificates(url: URL): List<X509Certificate> {
        val conn = url.openConnection() as HttpsURLConnection
        try {
            conn.hostnameVerifier = AllowAllHostnameVerifier()
            conn.sslSocketFactory = object : SSLCertificateSocketFactory(1000) {
                init {
                    setTrustManagers(arrayOf(object : X509TrustManager {
                        override fun checkClientTrusted(
                            chain: Array<out X509Certificate?>?,
                            authType: String?
                        ) { /* OK */ }
                        override fun checkServerTrusted(
                            chain: Array<out X509Certificate?>?,
                            authType: String?
                        ) { /* OK */ }
                        override fun getAcceptedIssuers(): Array<out X509Certificate?>? = emptyArray()
                    }))
                }
            }
            conn.inputStream.read()
            val certs = mutableListOf<X509Certificate>()
            conn.serverCertificates.forEach { certs += it as X509Certificate }
            return certs
        } finally {
            conn.disconnect()
        }
    }

}